// Licence file C:\Users\musta\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System.Data.SqlTypes;
using System.Reflection;

namespace DataAccess
{
    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public DbSet<Adresler> Adresler { get; set; }
        public DbSet<Ilceler> Ilceler { get; set; }
        public DbSet<Sehirler> Sehirler { get; set; }
        public DbSet<KasaHareketler> KasaHareketler { get; set; }
        public DbSet<Kasalar> Kasalar { get; set; }
        public DbSet<MusteriEvraklar> MusteriEvraklar { get; set; }
        public DbSet<StokCategoryler> StokCategoryler { get; set; }
        public DbSet<StokGruplar> StokGruplar { get; set; }
        public DbSet<StokHareketler> StokHareketler { get; set; }
        public DbSet<Stoklar> Stoklar { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"server=(localdb)\MSSQLLocalDB;Database=SIRKET;Trusted_Connection=True;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());
        }

    }

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class Adresler
    {
        public int Id { get; set; }
        public string Telefon { get; set; }
        public string Telefon2 { get; set; }
        public string Fax { get; set; }
        public string Web { get; set; }
        public string Eposta { get; set; }
        public int IlceId { get; set; }
        public string AcikAdres { get; set; }

        public virtual Ilceler Ilceler { get; set; }
    }

    public class Ilceler
    {
        public int Id { get; set; }
        public int SehirId { get; set; }
        public string Ad { get; set; }

        // Reverse navigation
        public virtual List<Adresler> Adresler { get; set; }

        public virtual Sehirler Sehirler { get; set; }

        public Ilceler()
        {
            Adresler = new List<Adresler>();
        }
    }

    public class Sehirler
    {
        public int Id { get; set; }
        public string Ad { get; set; }

        // Reverse navigation
        public virtual List<Ilceler> Ilceler { get; set; }

        public Sehirler()
        {
            Ilceler = new List<Ilceler>();
        }
    }

    public class KasaHareketler
    {
        public int Id { get; set; }
        public int KasaId { get; set; }
        public int CariId { get; set; }
        public string EvrakNo { get; set; }
        public decimal GirenCikanMiktar { get; set; }
        public DateTime Tarih { get; set; }
        public string Aciklama { get; set; }

        public virtual Kasalar Kasalar { get; set; }
    }

    public class Kasalar
    {
        public int Id { get; set; }
        public string Ad { get; set; }

        // Reverse navigation
        public virtual List<KasaHareketler> KasaHareketler { get; set; }

        public Kasalar()
        {
            KasaHareketler = new List<KasaHareketler>();
        }
    }

    public class MusteriEvraklar
    {
        public int Id { get; set; }
        public int AlinanCariId { get; set; }
        public string AsilBorclu { get; set; }
        public DateTime AlisTarihi { get; set; }
    }

    public class StokCategoryler
    {
        public int Id { get; set; }
        public string Ad { get; set; }

        // Reverse navigation
        public virtual List<StokGruplar> StokGruplar { get; set; }

        public StokCategoryler() => StokGruplar = new List<StokGruplar>();
    }

    public class StokGruplar
    {
        public int Id { get; set; }
        public int StokId { get; set; }
        public int StokCategoryId { get; set; }

        public virtual StokCategoryler StokCategoryler { get; set; }
        public virtual Stoklar Stoklar { get; set; }
    }

    public class StokHareketler
    {
        public int Id { get; set; }
        public int StokId { get; set; }
        public int FaturaId { get; set; }
        public decimal Miktar { get; set; }
        public string Birim { get; set; }
        public decimal Fiyat { get; set; }
        public decimal BrutTutar { get; set; }
        public int Kdv { get; set; }
        public decimal NetTutar { get; set; }
        public DateTime Tarih { get; set; }
        public string Aciklama { get; set; }

        public virtual Stoklar Stoklar { get; set; }
    }

    public class Stoklar
    {
        public int Id { get; set; }
        public string Kod { get; set; }
        public string Barkod { get; set; }
        public string Ad { get; set; }
        public int Kdv { get; set; }
        public string Birim { get; set; }

        // Reverse navigation
        public virtual List<StokGruplar> StokGruplar { get; set; }
        public virtual List<StokHareketler> StokHareketler { get; set; }

        public Stoklar()
        {
            StokGruplar = new List<StokGruplar>();
            StokHareketler = new List<StokHareketler>();
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class AdreslerConfiguration : IEntityTypeConfiguration<Adresler>
    {
        public void Configure(EntityTypeBuilder<Adresler> builder)
        {
            builder.ToTable("Adresler", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Adresler").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Telefon).HasColumnName(@"Telefon").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Telefon2).HasColumnName(@"Telefon2").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Web).HasColumnName(@"Web").HasColumnType("varchar(150)").IsRequired(false).IsUnicode(false).HasMaxLength(150);
            builder.Property(x => x.Eposta).HasColumnName(@"Eposta").HasColumnType("varchar(150)").IsRequired(false).IsUnicode(false).HasMaxLength(150);
            builder.Property(x => x.IlceId).HasColumnName(@"IlceId").HasColumnType("int").IsRequired();
            builder.Property(x => x.AcikAdres).HasColumnName(@"AcikAdres").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);

            // Foreign keys
            builder.HasOne(a => a.Ilceler).WithMany(b => b.Adresler).HasForeignKey(c => c.IlceId).HasConstraintName("Ilce_1_M_Adresler");
        }
    }

    public class IlcelerConfiguration : IEntityTypeConfiguration<Ilceler>
    {
        public void Configure(EntityTypeBuilder<Ilceler> builder)
        {
            builder.ToTable("Ilceler", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Ilceler").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SehirId).HasColumnName(@"SehirId").HasColumnType("int").IsRequired();
            builder.Property(x => x.Ad).HasColumnName(@"Ad").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.Sehirler).WithMany(b => b.Ilceler).HasForeignKey(c => c.SehirId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("Sehir_1_M_Ilceler");

            builder.HasIndex(x => x.Ad).HasDatabaseName("UK_Ilce_Ad").IsUnique();
        }
    }

    public class SehirlerConfiguration : IEntityTypeConfiguration<Sehirler>
    {
        public void Configure(EntityTypeBuilder<Sehirler> builder)
        {
            builder.ToTable("Sehirler", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Sehirler").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Ad).HasColumnName(@"Ad").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            builder.HasIndex(x => x.Ad).HasDatabaseName("UK_Sehir_Ad").IsUnique();
        }
    }

    public class KasaHareketlerConfiguration : IEntityTypeConfiguration<KasaHareketler>
    {
        public void Configure(EntityTypeBuilder<KasaHareketler> builder)
        {
            builder.ToTable("KasaHareketler", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_KasaHareketler").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.KasaId).HasColumnName(@"KasaId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CariId).HasColumnName(@"CariId").HasColumnType("int").IsRequired();
            builder.Property(x => x.EvrakNo).HasColumnName(@"EvrakNo").HasColumnType("varchar(14)").IsRequired().IsUnicode(false).HasMaxLength(14);
            builder.Property(x => x.GirenCikanMiktar).HasColumnName(@"GirenCikanMiktar").HasColumnType("money").IsRequired();
            builder.Property(x => x.Tarih).HasColumnName(@"Tarih").HasColumnType("date").IsRequired();
            builder.Property(x => x.Aciklama).HasColumnName(@"Aciklama").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);

            // Foreign keys
            builder.HasOne(a => a.Kasalar).WithMany(b => b.KasaHareketler).HasForeignKey(c => c.KasaId).HasConstraintName("Kasa_1_M_KasaHareketler");

            builder.HasIndex(x => x.EvrakNo).HasDatabaseName("KasaHareket_EvrakNo").IsUnique();
        }
    }

    public class KasalarConfiguration : IEntityTypeConfiguration<Kasalar>
    {
        public void Configure(EntityTypeBuilder<Kasalar> builder)
        {
            builder.ToTable("Kasalar", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Kasa").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Ad).HasColumnName(@"Ad").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            builder.HasIndex(x => x.Ad).HasDatabaseName("UK_Kasa_Ad").IsUnique();
        }
    }

    public class MusteriEvraklarConfiguration : IEntityTypeConfiguration<MusteriEvraklar>
    {
        public void Configure(EntityTypeBuilder<MusteriEvraklar> builder)
        {
            builder.ToTable("MusteriEvraklar", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_MusteriEvraklar").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.AlinanCariId).HasColumnName(@"AlinanCariId").HasColumnType("int").IsRequired();
            builder.Property(x => x.AsilBorclu).HasColumnName(@"AsilBorclu").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.AlisTarihi).HasColumnName(@"AlisTarihi").HasColumnType("date").IsRequired();

            builder.HasIndex(x => x.Id).HasDatabaseName("UK_MusteriEvrak_Id").IsUnique();
        }
    }

    public class StokCategorylerConfiguration : IEntityTypeConfiguration<StokCategoryler>
    {
        public void Configure(EntityTypeBuilder<StokCategoryler> builder)
        {
            builder.ToTable("StokCategoryler", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_StokCategory").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Ad).HasColumnName(@"Ad").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
        }
    }

    public class StokGruplarConfiguration : IEntityTypeConfiguration<StokGruplar>
    {
        public void Configure(EntityTypeBuilder<StokGruplar> builder)
        {
            builder.ToTable("StokGruplar", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_StokGrup").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.StokId).HasColumnName(@"StokId").HasColumnType("int").IsRequired();
            builder.Property(x => x.StokCategoryId).HasColumnName(@"StokCategoryId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.StokCategoryler).WithMany(b => b.StokGruplar).HasForeignKey(c => c.StokCategoryId).HasConstraintName("StokCategory_1_M_StokGruplar");
            builder.HasOne(a => a.Stoklar).WithMany(b => b.StokGruplar).HasForeignKey(c => c.StokId).HasConstraintName("Stok_1_M_StokGruplar");
        }
    }

    public class StokHareketlerConfiguration : IEntityTypeConfiguration<StokHareketler>
    {
        public void Configure(EntityTypeBuilder<StokHareketler> builder)
        {
            builder.ToTable("StokHareketler", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_StokHareket").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.StokId).HasColumnName(@"StokId").HasColumnType("int").IsRequired();
            builder.Property(x => x.FaturaId).HasColumnName(@"FaturaId").HasColumnType("int").IsRequired();
            builder.Property(x => x.Miktar).HasColumnName(@"Miktar").HasColumnType("decimal(18,6)").HasPrecision(18,6).IsRequired();
            builder.Property(x => x.Birim).HasColumnName(@"Birim").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Fiyat).HasColumnName(@"Fiyat").HasColumnType("money").IsRequired();
            builder.Property(x => x.BrutTutar).HasColumnName(@"BrutTutar").HasColumnType("money").IsRequired();
            builder.Property(x => x.Kdv).HasColumnName(@"KDV").HasColumnType("int").IsRequired();
            builder.Property(x => x.NetTutar).HasColumnName(@"NetTutar").HasColumnType("money").IsRequired();
            builder.Property(x => x.Tarih).HasColumnName(@"Tarih").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Aciklama).HasColumnName(@"Aciklama").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);

            // Foreign keys
            builder.HasOne(a => a.Stoklar).WithMany(b => b.StokHareketler).HasForeignKey(c => c.StokId).HasConstraintName("Stok_1_M_StokHareketler");
        }
    }

    public class StoklarConfiguration : IEntityTypeConfiguration<Stoklar>
    {
        public void Configure(EntityTypeBuilder<Stoklar> builder)
        {
            builder.ToTable("Stoklar", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Stok").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Kod).HasColumnName(@"Kod").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Barkod).HasColumnName(@"Barkod").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Ad).HasColumnName(@"Ad").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.Kdv).HasColumnName(@"KDV").HasColumnType("int").IsRequired();
            builder.Property(x => x.Birim).HasColumnName(@"Birim").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            builder.HasIndex(x => x.Ad).HasDatabaseName("UK_Stok_Ad").IsUnique();
            builder.HasIndex(x => x.Barkod).HasDatabaseName("UK_Stok_Barkod").IsUnique();
            builder.HasIndex(x => x.Kod).HasDatabaseName("UK_Stok_Kod").IsUnique();
        }
    }


    #endregion

}